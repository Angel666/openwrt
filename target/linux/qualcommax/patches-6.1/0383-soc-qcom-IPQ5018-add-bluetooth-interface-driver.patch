From 29d8a5dbf6718285be14800f817267834061fb05 Mon Sep 17 00:00:00 2001
From: "Singh, Amandeep" <amansing@codeaurora.org>
Date: Mon, 24 May 2021 15:55:29 +0530
Subject: [PATCH] ipq50xx: qti: bt: Add BT interface driver

This snapshot is taken as of msm-4.4 commit 56c1ce943e18
(soc: qcom: Update XO/TCXO based on board type).

This commit adds bt ipc and tty driver to communicate between
firmware and user space app respectively.

Change-Id: I5e2c6e99464908b3f5af3f9fd0b3444a27158b84
Signed-off-by: Singh, Amandeep <amansing@codeaurora.org>
---
 drivers/soc/qcom/bt_ipc.c | 564 +++++++++++++++++++++++++++++++++++
 drivers/soc/qcom/bt_tty.c | 602 ++++++++++++++++++++++++++++++++++++++
 include/linux/bt.h        | 233 +++++++++++++++
 3 files changed, 1399 insertions(+)
 create mode 100644 drivers/soc/qcom/bt_ipc.c
 create mode 100644 drivers/soc/qcom/bt_tty.c
 create mode 100644 include/linux/bt.h

--- /dev/null
+++ b/drivers/soc/qcom/bt_ipc.c
@@ -0,0 +1,564 @@
+/*
+ * Copyright (c) 2020 The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/of.h>
+#include <linux/io.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/list.h>
+#include <linux/errno.h>
+#include <linux/delay.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/regmap.h>
+#include <linux/of_irq.h>
+#include <linux/kthread.h>
+#include <linux/debugfs.h>
+#include <linux/notifier.h>
+#include <linux/panic_notifier.h>
+#include <linux/mfd/syscon.h>
+#include <uapi/linux/major.h>
+#include <linux/completion.h>
+#include <linux/workqueue.h>
+#include "bt.h"
+
+void bt_ipc_purge_tx_queue(struct bt_descriptor *btDesc)
+{
+	struct ipc_intent *intent;
+
+	while (!list_empty(&btDesc->ipc.tx_q)) {
+		intent = list_first_entry(&btDesc->ipc.tx_q, struct ipc_intent,
+						list);
+
+		list_del(&intent->list);
+		kfree(intent->buf);
+		kfree(intent);
+	}
+
+	atomic_set(&btDesc->ipc.tx_q_cnt, 0);
+}
+EXPORT_SYMBOL(bt_ipc_purge_tx_queue);
+
+static void bt_ipc_process_pending_tx_queue(struct bt_descriptor *btDesc)
+{
+	int ret;
+	struct ipc_intent *intent;
+
+	while (!list_empty(&btDesc->ipc.tx_q)) {
+		intent = list_first_entry(&btDesc->ipc.tx_q, struct ipc_intent,
+						list);
+
+		ret = bt_ipc_send_msg(btDesc, (uint8_t)0x100, intent->buf,
+					intent->len, false);
+		if (ret) {
+			mdelay(50);
+			break;
+		}
+
+		list_del(&intent->list);
+		atomic_dec(&btDesc->ipc.tx_q_cnt);
+		kfree(intent->buf);
+		kfree(intent);
+	}
+}
+
+int
+bt_ipc_queue_tx(struct bt_descriptor *btDesc, const uint8_t *buf, uint16_t len)
+{
+	struct ipc_intent *intent;
+	uint8_t *buffer;
+	struct device *dev = &btDesc->pdev->dev;
+
+	if (unlikely(atomic_read(&btDesc->ipc.tx_q_cnt) >= IPC_TX_QSIZE)) {
+		dev_err(dev, "TX Queue Limit reached\n");
+		return -ENOSPC;
+	}
+
+	intent = kzalloc(sizeof(struct ipc_intent), GFP_KERNEL);
+	if (!intent)
+		return -ENOMEM;
+
+	buffer = kzalloc(len, GFP_KERNEL);
+	if (!buffer)
+		return -ENOMEM;
+
+	memcpy_toio(buffer, buf, len);
+	intent->buf = buffer;
+
+	intent->len = len;
+	list_add_tail(&intent->list, &btDesc->ipc.tx_q);
+	atomic_inc(&btDesc->ipc.tx_q_cnt);
+
+	return 0;
+}
+
+static void *bt_ipc_alloc_lmsg(struct bt_descriptor *btDesc, uint32_t len,
+		struct ipc_aux_ptr *aux_ptr, uint8_t *is_lbuf_full)
+{
+	uint8_t idx;
+	uint8_t blks;
+	uint8_t blks_consumed;
+	struct bt_mem *btmem = &btDesc->btmem;
+	struct device *dev = &btDesc->pdev->dev;
+	uint32_t lsz = IPC_LBUF_SZ(btmem->tx_ctxt, TotalMemorySize, lring_buf,
+				   lmsg_buf_cnt);
+
+	if (btmem->tx_ctxt->lring_buf == 0) {
+		dev_err(dev, "no long message buffer not initialized\n");
+		return ERR_PTR(-ENODEV);
+	}
+
+	blks = GET_NO_OF_BLOCKS(len, lsz);
+
+	if (!btmem->lmsg_ctxt.lmsg_free_cnt ||
+			(blks > btmem->lmsg_ctxt.lmsg_free_cnt))
+		return ERR_PTR(-EAGAIN);
+
+	idx = btmem->lmsg_ctxt.widx;
+
+	if ((btmem->lmsg_ctxt.widx + blks) > btmem->tx_ctxt->lmsg_buf_cnt) {
+		blks_consumed = btmem->tx_ctxt->lmsg_buf_cnt - idx;
+		aux_ptr->len = len - (blks_consumed * lsz);
+		aux_ptr->buf = btmem->tx_ctxt->lring_buf;
+	}
+
+	btmem->lmsg_ctxt.widx = (btmem->lmsg_ctxt.widx + blks) %
+		btmem->tx_ctxt->lmsg_buf_cnt;
+
+	btmem->lmsg_ctxt.lmsg_free_cnt -= blks;
+
+	if (btmem->lmsg_ctxt.lmsg_free_cnt <=
+			((btmem->tx_ctxt->lmsg_buf_cnt * 20) / 100))
+		*is_lbuf_full = 1;
+
+	return (TO_APPS_ADDR(btmem->tx_ctxt->lring_buf) + (idx * lsz));
+}
+
+static struct ring_buffer_info *bt_ipc_get_tx_rbuf(struct bt_descriptor *btDesc,
+		uint8_t *is_sbuf_full)
+{
+	uint8_t idx;
+	struct ring_buffer_info *rinfo;
+	struct bt_mem *btmem = &btDesc->btmem;
+
+	for (rinfo = &(btmem->tx_ctxt->sring_buf_info);	rinfo != NULL;
+		rinfo = (struct ring_buffer_info *)(uintptr_t)(rinfo->next)) {
+		idx = (rinfo->widx + 1) % (btmem->tx_ctxt->smsg_buf_cnt);
+
+		if (idx != rinfo->tidx) {
+			btmem->lmsg_ctxt.smsg_free_cnt--;
+
+			if (btmem->lmsg_ctxt.smsg_free_cnt <=
+				((btmem->tx_ctxt->smsg_buf_cnt * 20) / 100))
+				*is_sbuf_full = 1;
+
+			return rinfo;
+		}
+	}
+
+	return ERR_PTR(-EAGAIN);
+}
+
+int bt_ipc_send_msg(struct bt_descriptor *btDesc, uint16_t msg_hdr,
+		const uint8_t *pData, uint16_t len, bool dequeue)
+{
+	int ret = 0;
+	struct bt_mem *btmem = &btDesc->btmem;
+	struct device *dev = &btDesc->pdev->dev;
+	struct ring_buffer_info *rinfo;
+	struct ring_buffer *rbuf;
+	uint8_t is_lbuf_full = 0;
+	uint8_t is_sbuf_full = 0;
+	struct ipc_aux_ptr aux_ptr;
+	void *lmsg_data;
+
+	if (dequeue)
+		bt_ipc_process_pending_tx_queue(btDesc);
+
+	rinfo = bt_ipc_get_tx_rbuf(btDesc, &is_sbuf_full);
+	if (IS_ERR(rinfo)) {
+		dev_err(dev, "short msg buf full, queuing msg[%d]\n",
+				atomic_read(&btDesc->ipc.tx_q_cnt));
+		ret = PTR_ERR(rinfo);
+		if (dequeue)
+			ret = bt_ipc_queue_tx(btDesc, pData, len);
+		return ret;
+	}
+
+	rbuf = &((struct ring_buffer *)(TO_APPS_ADDR(
+						rinfo->rbuf)))[rinfo->widx];
+	rbuf->msg_hdr = msg_hdr;
+	rbuf->len = len;
+
+	if (len > IPC_MSG_PLD_SZ) {
+		rbuf->msg_hdr = rbuf->msg_hdr | IPC_LMSG_MASK;
+
+		aux_ptr.len = 0;
+		aux_ptr.buf = 0;
+
+		lmsg_data = bt_ipc_alloc_lmsg(btDesc, len,
+				&aux_ptr, &is_lbuf_full);
+
+		if (IS_ERR(lmsg_data)) {
+			dev_err(dev, "long msg buf full, queuing msg[%d]\n",
+					atomic_read(&btDesc->ipc.tx_q_cnt));
+			ret = PTR_ERR(lmsg_data);
+			if (dequeue)
+				ret = bt_ipc_queue_tx(btDesc, pData, len);
+			return ret;
+		}
+
+		memcpy_toio(lmsg_data, pData,
+				(len - aux_ptr.len));
+
+		if (aux_ptr.buf) {
+			memcpy_toio(TO_APPS_ADDR(aux_ptr.buf),
+				(pData + (len - aux_ptr.len)), aux_ptr.len);
+		}
+
+		rbuf->payload.lmsg_data = TO_BT_ADDR(lmsg_data);
+	} else {
+		memcpy_toio(rbuf->payload.smsg_data, pData, len);
+	}
+
+	if (is_sbuf_full || is_lbuf_full)
+		rbuf->msg_hdr = rbuf->msg_hdr | IPC_RACK_MASK;
+
+	rinfo->widx = (rinfo->widx + 1) % btmem->tx_ctxt->smsg_buf_cnt;
+
+	regmap_write(btDesc->ipc.regmap, btDesc->ipc.offset,
+			BIT(btDesc->ipc.bit));
+
+	return ret;
+}
+
+static
+void bt_ipc_free_lmsg(struct bt_descriptor *btDesc, uint32_t lmsg, uint16_t len)
+{
+	uint8_t idx;
+	uint8_t blks;
+	struct bt_mem *btmem = &btDesc->btmem;
+	uint32_t lsz = IPC_LBUF_SZ(btmem->tx_ctxt, TotalMemorySize, lring_buf,
+				   lmsg_buf_cnt);
+
+	idx = GET_TX_INDEX_FROM_BUF(lmsg, lsz);
+
+	if (idx != btmem->lmsg_ctxt.ridx)
+		return;
+
+	blks = GET_NO_OF_BLOCKS(len, lsz);
+
+	btmem->lmsg_ctxt.ridx  = (btmem->lmsg_ctxt.ridx  + blks) %
+		btmem->tx_ctxt->lmsg_buf_cnt;
+
+	btmem->lmsg_ctxt.lmsg_free_cnt += blks;
+}
+
+static void bt_ipc_cust_msg(struct bt_descriptor *btDesc, uint8_t msgid)
+{
+	struct device *dev = &btDesc->pdev->dev;
+	struct bt_mem *btmem = &btDesc->btmem;
+	uint16_t msg_hdr = 0;
+	int ret;
+
+	msg_hdr |= msgid;
+
+	switch (msgid) {
+	case IPC_CMD_IPC_STOP:
+		dev_info(dev, "BT IPC Stopped, gracefully stopping APSS IPC\n");
+		break;
+	case IPC_CMD_SWITCH_TO_UART:
+		dev_info(dev, "Configured UART, Swithing BT to debug mode\n");
+		break;
+	case IPC_CMD_PREPARE_DUMP:
+		dev_info(dev, "IPQ crashed, inform BT to prepare dump\n");
+		break;
+	case IPC_CMD_COLLECT_DUMP:
+		dev_info(dev, "BT Crashed, gracefully stopping IPC\n");
+		return;
+	case IPC_CMD_IPC_START:
+		btmem->tx_ctxt = (struct context_info *)((void *)
+			btmem->rx_ctxt + btmem->rx_ctxt->TotalMemorySize);
+		btmem->lmsg_ctxt.widx = 0;
+		btmem->lmsg_ctxt.ridx = 0;
+		btmem->lmsg_ctxt.smsg_free_cnt = btmem->tx_ctxt->smsg_buf_cnt;
+		btmem->lmsg_ctxt.lmsg_free_cnt = btmem->tx_ctxt->lmsg_buf_cnt;
+		atomic_set(&btDesc->state, 1);
+
+		dev_info(dev, "BT IPC Started, starting APSS IPC\n");
+		return;
+	default:
+		dev_err(dev, "invalid custom message\n");
+		return;
+	}
+
+	if (unlikely(!atomic_read(&btDesc->state))) {
+		dev_err(dev, "BT IPC not initialized, no message sent\n");
+		return;
+	}
+
+	atomic_set(&btDesc->state, 0);
+
+	ret = bt_ipc_send_msg(btDesc, msg_hdr, NULL, 0, true);
+	if (ret)
+		dev_err(dev, "err: sending message\n");
+}
+
+static bool bt_ipc_process_peer_msgs(struct bt_descriptor *btDesc,
+		struct ring_buffer_info *rinfo, uint8_t *pRxMsgCount)
+{
+	struct bt_mem *btmem = &btDesc->btmem;
+	struct ring_buffer *rbuf;
+	uint8_t ridx, lbuf_idx;
+	uint8_t blks_consumed;
+	struct ipc_aux_ptr aux_ptr;
+	enum ipc_pkt_type pktType = IPC_CUST_PKT;
+	bool ackReqd = false;
+	uint8_t *rxbuf = NULL;
+	unsigned char *buf;
+	uint32_t lsz = IPC_LBUF_SZ(btmem->rx_ctxt, TotalMemorySize, lring_buf,
+				   lmsg_buf_cnt);
+
+	ridx = rinfo->ridx;
+
+	rbuf = &((struct ring_buffer *)(TO_APPS_ADDR(
+			btmem->rx_ctxt->sring_buf_info.rbuf)))[ridx];
+
+	while (ridx != rinfo->widx) {
+		memset(&aux_ptr, 0, sizeof(struct ipc_aux_ptr));
+
+		rbuf = &((struct ring_buffer *)(TO_APPS_ADDR(
+				btmem->rx_ctxt->sring_buf_info.rbuf)))[ridx];
+
+		if (IS_LONG_MSG(rbuf->msg_hdr)) {
+			rxbuf = TO_APPS_ADDR(rbuf->payload.lmsg_data);
+
+			if (IS_RX_MEM_NON_CONTIGIOUS(rbuf->payload.lmsg_data,
+							rbuf->len, lsz)) {
+
+				lbuf_idx = GET_RX_INDEX_FROM_BUF(
+						rbuf->payload.lmsg_data, lsz);
+
+				blks_consumed = btmem->rx_ctxt->lmsg_buf_cnt -
+					lbuf_idx;
+				aux_ptr.len = rbuf->len - (blks_consumed * lsz);
+				aux_ptr.buf = btmem->rx_ctxt->lring_buf;
+			}
+		} else {
+			rxbuf = rbuf->payload.smsg_data;
+		}
+
+		if (IS_REQ_ACK(rbuf->msg_hdr))
+			ackReqd = true;
+
+		pktType = IPC_GET_PKT_TYPE(rbuf->msg_hdr);
+
+		switch (pktType) {
+		case IPC_HCI_PKT:
+			buf = kzalloc(rbuf->len, GFP_ATOMIC);
+			if (!buf)
+				return -ENOMEM;
+
+			memcpy_fromio(buf, rxbuf, (rbuf->len - aux_ptr.len));
+
+			if (aux_ptr.buf)
+				memcpy_fromio(buf + (rbuf->len - aux_ptr.len),
+					TO_APPS_ADDR(aux_ptr.buf), aux_ptr.len);
+
+			btDesc->recvmsg_cb(btDesc, buf, rbuf->len);
+			kfree(buf);
+			break;
+		case IPC_CUST_PKT:
+			bt_ipc_cust_msg(btDesc, IPC_GET_MSG_ID(rbuf->msg_hdr));
+			break;
+		case IPC_AUDIO_PKT:
+			break;
+		default:
+			break;
+		}
+
+		ridx = (ridx + 1) % rinfo->ring_buf_cnt;
+	}
+
+	wait_event(btDesc->ipc.wait_q,
+			((2 * rbuf->len) < bt_ipc_avail_size(btDesc)));
+	rinfo->ridx = ridx;
+
+	return ackReqd;
+}
+
+static void bt_ipc_process_ack(struct bt_descriptor *btDesc)
+{
+	struct ring_buffer_info *rinfo;
+	struct bt_mem *btmem = &btDesc->btmem;
+
+	for (rinfo = &btmem->tx_ctxt->sring_buf_info; rinfo != NULL;
+		rinfo = (struct ring_buffer_info *)(uintptr_t)(rinfo->next)) {
+		uint8_t tidx = rinfo->tidx;
+		struct ring_buffer *rbuf = (struct ring_buffer *)
+			TO_APPS_ADDR(rinfo->rbuf);
+
+		while (tidx != rinfo->ridx) {
+			if (IS_LONG_MSG(rbuf[tidx].msg_hdr)) {
+				bt_ipc_free_lmsg(btDesc,
+						 rbuf[tidx].payload.lmsg_data,
+						 rbuf[tidx].len);
+			}
+
+			tidx = (tidx + 1) % btmem->tx_ctxt->smsg_buf_cnt;
+			btmem->lmsg_ctxt.smsg_free_cnt++;
+		}
+
+		rinfo->tidx = tidx;
+	}
+}
+
+static
+int bt_ipc_sendmsg(struct bt_descriptor *btDesc, unsigned char *buf, int len)
+{
+	int ret;
+	uint16_t msg_hdr = 0x100;
+	struct device *dev = &btDesc->pdev->dev;
+	unsigned long flags;
+
+	if (unlikely(!atomic_read(&btDesc->state))) {
+		dev_err(dev, "BT IPC not initialized, no message sent\n");
+		return -ENODEV;
+	}
+
+	spin_lock_irqsave(&btDesc->lock, flags);
+
+	ret = bt_ipc_send_msg(btDesc, msg_hdr, (uint8_t *)buf, (uint16_t)len,
+				true);
+	if (ret)
+		dev_err(dev, "err: sending message\n");
+
+	spin_unlock_irqrestore(&btDesc->lock, flags);
+
+	return ret;
+}
+
+static void bt_ipc_worker(struct work_struct *work)
+{
+	unsigned long flags;
+	struct ring_buffer_info *rinfo;
+
+	struct bt_ipc *ipc = container_of(work, struct bt_ipc, work);
+	struct bt_descriptor *btDesc = container_of(ipc, struct bt_descriptor,
+						    ipc);
+	struct bt_mem *btmem = &btDesc->btmem;
+	bool ackReqd = false;
+
+	spin_lock_irqsave(&btDesc->lock, flags);
+
+	if (unlikely(!atomic_read(&btDesc->state)))
+		btmem->rx_ctxt = (struct context_info *)(btmem->virt + 0xe000);
+	else
+		bt_ipc_process_ack(btDesc);
+
+	for (rinfo = &(btmem->rx_ctxt->sring_buf_info); rinfo != NULL;
+		rinfo = (struct ring_buffer_info *)(uintptr_t)(rinfo->next)) {
+		if (bt_ipc_process_peer_msgs(btDesc, rinfo,
+					&btmem->rx_ctxt->smsg_buf_cnt)) {
+			ackReqd = true;
+		}
+	}
+
+	if (ackReqd) {
+		regmap_write(ipc->regmap, ipc->offset, BIT(ipc->bit));
+	}
+
+	if (btDesc->debug_en)
+		bt_ipc_cust_msg(btDesc, IPC_CMD_SWITCH_TO_UART);
+
+	spin_unlock_irqrestore(&btDesc->lock, flags);
+	enable_irq(ipc->irq);
+}
+
+static irqreturn_t bt_ipc_irq_handler(int irq, void *data)
+{
+	struct bt_descriptor *btDesc = data;
+
+	disable_irq_nosync(btDesc->ipc.irq);
+	queue_work(btDesc->ipc.wq, &btDesc->ipc.work);
+
+	return IRQ_HANDLED;
+}
+
+
+static
+int ipc_panic_handler(struct notifier_block *nb, unsigned long event, void *ptr)
+{
+	struct bt_descriptor *btDesc = container_of(nb, struct bt_descriptor,
+								panic_nb);
+	bt_ipc_cust_msg(btDesc, IPC_CMD_PREPARE_DUMP);
+
+	return NOTIFY_DONE;
+}
+
+int bt_ipc_init(struct bt_descriptor *btDesc)
+{
+	int ret;
+	struct bt_ipc *ipc = &btDesc->ipc;
+	struct device *dev = &btDesc->pdev->dev;
+
+	spin_lock_init(&btDesc->lock);
+	INIT_LIST_HEAD(&ipc->tx_q);
+
+	ipc->wq = create_singlethread_workqueue("bt_ipc");
+	if (!ipc->wq) {
+		dev_err(dev, "failed to initialize WQ\n");
+		return -EAGAIN;
+	}
+
+	INIT_WORK(&ipc->work, bt_ipc_worker);
+
+	ret = devm_request_threaded_irq(dev, ipc->irq, NULL, bt_ipc_irq_handler,
+		IRQF_TRIGGER_RISING | IRQF_ONESHOT, "bt_ipc_irq", btDesc);
+
+	if (ret) {
+		dev_err(dev, "error registering irq[%d] ret = %d\n",
+				ipc->irq, ret);
+		goto irq_err;
+	}
+
+	btDesc->panic_nb.notifier_call = ipc_panic_handler;
+
+	ret = atomic_notifier_chain_register(&panic_notifier_list,
+							&btDesc->panic_nb);
+	if (ret)
+		goto panic_nb_err;
+
+	btDesc->sendmsg_cb = bt_ipc_sendmsg;
+
+	return 0;
+
+panic_nb_err:
+	devm_free_irq(dev, ipc->irq, btDesc);
+irq_err:
+	return ret;
+}
+EXPORT_SYMBOL(bt_ipc_init);
+
+void bt_ipc_deinit(struct bt_descriptor *btDesc)
+{
+	struct bt_ipc *ipc = &btDesc->ipc;
+	struct device *dev = &btDesc->pdev->dev;
+
+	atomic_notifier_chain_unregister(&panic_notifier_list,
+							&btDesc->panic_nb);
+	devm_free_irq(dev, ipc->irq, btDesc);
+}
+EXPORT_SYMBOL(bt_ipc_deinit);
--- /dev/null
+++ b/drivers/soc/qcom/bt_tty.c
@@ -0,0 +1,601 @@
+/*
+ * Copyright (c) 2020 The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/of.h>
+#include <linux/io.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/list.h>
+#include <linux/errno.h>
+#include <linux/delay.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/of_irq.h>
+#include <linux/kthread.h>
+#include <linux/debugfs.h>
+#include <linux/mfd/syscon.h>
+#include <uapi/linux/major.h>
+#include <linux/remoteproc.h>
+#include <linux/clk.h>
+#include "bt.h"
+
+static bool btss_debug;
+module_param(btss_debug, bool, 0644);
+
+int bt_ipc_avail_size(struct bt_descriptor *btDesc)
+{
+	return tty_buffer_space_avail(&btDesc->tty_port);
+}
+
+static int bt_open(struct tty_struct *tty, struct file *file)
+{
+	return 0;
+}
+
+static void bt_close(struct tty_struct *tty, struct file *file)
+{
+}
+
+static
+void bt_read(struct bt_descriptor *btDesc, unsigned char *buf, int len)
+{
+	tty_insert_flip_string(&btDesc->tty_port, buf, len);
+	tty_flip_buffer_push(&btDesc->tty_port);
+
+	wake_up(&btDesc->ipc.wait_q);
+}
+
+static
+int bt_write(struct tty_struct *tty, const unsigned char *buf, int len)
+{
+	int ret = 0;
+	struct bt_descriptor *btDesc = container_of(tty->port,
+						struct bt_descriptor, tty_port);
+	struct device *dev = &btDesc->pdev->dev;
+
+	if (btDesc->sendmsg_cb) {
+		ret = btDesc->sendmsg_cb(btDesc, (unsigned char *)buf, len);
+		if (ret < 0 && ret != EAGAIN)
+			dev_err(dev, "failed to send msg, ret = %d\n", ret);
+	}
+
+	return len;
+}
+
+static unsigned int bt_write_room(struct tty_struct *tty)
+{
+	return 2048;
+}
+
+static
+void bt_set_termios(struct tty_struct *tty, const struct ktermios *old_termios)
+{
+}
+
+static int bt_tiocmget(struct tty_struct *tty)
+{
+	return 0;
+}
+
+static
+int bt_tiocmset(struct tty_struct *tty, unsigned int set, unsigned int clear)
+{
+	return 0;
+}
+
+static
+int bt_ioctl(struct tty_struct *tty, unsigned int cmd, unsigned long arg)
+{
+	int ret = 0;
+	struct bt_descriptor *btDesc = container_of(tty->port,
+						struct bt_descriptor, tty_port);
+	struct device *dev = &btDesc->pdev->dev;
+	struct platform_device *rproc_pdev = btDesc->rproc_pdev;
+	struct rproc *rproc = platform_get_drvdata(rproc_pdev);
+
+	switch (cmd) {
+	case IOCTL_IPC_BOOT:
+		if (arg) {
+			ret = rproc_boot(rproc);
+			if (ret)
+				dev_err(dev, "m0 boot fail, ret = %d\n", ret);
+		} else {
+			rproc_shutdown(rproc);
+		}
+
+		break;
+	default:
+		ret = -ENOIOCTLCMD;
+	}
+
+	return ret;
+}
+
+void bt_throttle(struct tty_struct *tty)
+{
+	struct bt_descriptor *btDesc = container_of(tty->port,
+						struct bt_descriptor, tty_port);
+
+	disable_irq_nosync(btDesc->ipc.irq);
+}
+
+void bt_unthrottle(struct tty_struct *tty)
+{
+	struct bt_descriptor *btDesc = container_of(tty->port,
+						struct bt_descriptor, tty_port);
+
+	wake_up(&btDesc->ipc.wait_q);
+	enable_irq(btDesc->ipc.irq);
+}
+
+static int bt_tty_activate(struct tty_port *port, struct tty_struct *tty)
+{
+	return 0;
+}
+
+static void bt_tty_shutdown(struct tty_port *port)
+{
+}
+
+static const struct tty_port_operations bt_port_ops = {
+	.activate = bt_tty_activate,
+	.shutdown = bt_tty_shutdown
+};
+
+static const struct tty_operations bt_ops = {
+	.open		= bt_open,
+	.close		= bt_close,
+	.write		= bt_write,
+	.write_room	= bt_write_room,
+	.set_termios	= bt_set_termios,
+	.tiocmget	= bt_tiocmget,
+	.tiocmset	= bt_tiocmset,
+	.ioctl		= bt_ioctl,
+	.throttle	= bt_throttle,
+	.unthrottle	= bt_unthrottle,
+};
+
+int bt_tty_init(struct bt_descriptor *btDesc)
+{
+	int ret;
+	struct device *btdev = &btDesc->pdev->dev;
+	struct device *dev;
+
+	btDesc->tty_drv = tty_alloc_driver(1,
+				TTY_DRIVER_REAL_RAW | TTY_DRIVER_DYNAMIC_DEV);
+	if (!btDesc->tty_drv) {
+		ret = PTR_ERR(btDesc->tty_drv);
+		dev_err(btdev, "failed to alloc driver, ret %d\n", ret);
+		goto err;
+	}
+
+	btDesc->tty_drv->driver_name = "bt_tty";
+	btDesc->tty_drv->name = "ttyBT";
+	btDesc->tty_drv->major = 0;
+	btDesc->tty_drv->minor_start = 0;
+	btDesc->tty_drv->type = TTY_DRIVER_TYPE_SERIAL;
+	btDesc->tty_drv->subtype = SERIAL_TYPE_NORMAL;
+
+	btDesc->tty_drv->init_termios = tty_std_termios;
+	btDesc->tty_drv->init_termios.c_iflag &= ~(IGNBRK | BRKINT | PARMRK
+						| ISTRIP | INLCR | IGNCR | ICRNL
+						| IXON);
+
+	btDesc->tty_drv->init_termios.c_lflag &= ~(ECHO | ECHONL | ICANON | ISIG
+						| IEXTEN);
+
+	btDesc->tty_drv->init_termios.c_cflag &= ~(CSIZE | PARENB | CBAUD);
+	btDesc->tty_drv->init_termios.c_oflag &= ~(OPOST);
+	btDesc->tty_drv->init_termios.c_cflag |= CS8;
+
+	btDesc->tty_drv->init_termios.c_cc[VMIN] = 0;
+	btDesc->tty_drv->init_termios.c_cc[VTIME] = 255;
+	btDesc->tty_drv->flags = TTY_DRIVER_REAL_RAW | TTY_DRIVER_DYNAMIC_DEV;
+
+	tty_set_operations(btDesc->tty_drv, &bt_ops);
+
+	ret = tty_register_driver(btDesc->tty_drv);
+	if (ret < 0) {
+		dev_err(btdev, "failed to register driver, ret %d\n", ret);
+		goto err_tty_put;
+	}
+
+	tty_port_init(&btDesc->tty_port);
+	btDesc->tty_port.ops = &bt_port_ops;
+
+	dev = tty_port_register_device(&btDesc->tty_port,
+					btDesc->tty_drv, 0, NULL);
+	if (IS_ERR(dev)) {
+		ret = PTR_ERR(dev);
+		dev_err(btdev, "failed to register port, ret %d\n", ret);
+		goto err_tty_unreg;
+	}
+
+	return 0;
+
+err_tty_unreg:
+	tty_unregister_driver(btDesc->tty_drv);
+err_tty_put:
+	tty_driver_kref_put(btDesc->tty_drv);
+err:
+	return ret;
+}
+
+void bt_tty_deinit(struct bt_descriptor *btDesc)
+{
+	struct tty_driver *tty_drv = btDesc->tty_drv;
+
+	tty_unregister_device(tty_drv, 0);
+	tty_unregister_driver(tty_drv);
+	tty_driver_kref_put(tty_drv);
+}
+
+int bt_parse_ipc(struct bt_descriptor *btDesc)
+{
+	int ret;
+	struct device_node *np;
+	const char *key = "qcom,ipc";
+	struct bt_ipc *ipc = &btDesc->ipc;
+	struct device *dev = &btDesc->pdev->dev;
+
+	np = of_parse_phandle(dev->of_node, key, 0);
+	if (!np) {
+		dev_err(dev, "no qcom,ipc node\n");
+		return -ENODEV;
+	}
+
+	ipc->regmap = syscon_node_to_regmap(np);
+	if (IS_ERR(ipc->regmap))
+		return PTR_ERR(btDesc->ipc.regmap);
+
+	ret = of_property_read_u32_index(dev->of_node, key, 1, &ipc->offset);
+	if (ret < 0) {
+		dev_err(dev, "no offset in %s, ret = %d\n", key, ret);
+		return ret;
+	}
+
+	ret = of_property_read_u32_index(dev->of_node, key, 2, &ipc->bit);
+	if (ret < 0) {
+		dev_err(dev, "no bit in %s, ret = %d\n", key, ret);
+		return ret;
+	}
+
+	ipc->irq = platform_get_irq(btDesc->pdev, 0);
+	if (ipc->irq < 0) {
+		dev_err(dev, "err getting IRQ ret = %d\n", ipc->irq);
+		return ipc->irq;
+	}
+
+	dev_err(dev, "%s\n", __func__);
+
+	return 0;
+}
+
+int bt_parse_mem(struct bt_descriptor *btDesc)
+{
+	struct resource *res;
+	struct device_node *np;
+	struct device *dev = &btDesc->pdev->dev;
+	struct reserved_mem *rmem = btDesc->rmem;
+	struct bt_mem *btmem = &btDesc->btmem;
+
+	res = platform_get_resource_byname(btDesc->pdev, IORESOURCE_MEM,
+								"bt_warm_rst");
+	btDesc->warm_reset = devm_ioremap_resource(dev, res);
+	if (IS_ERR(btDesc->warm_reset)) {
+		dev_err(dev, "no reset defined\n");
+		return PTR_ERR(btDesc->warm_reset);
+	}
+
+	np = of_parse_phandle(dev->of_node, "memory-region", 0);
+	if (!np) {
+		dev_err(dev, "no memory-region node\n");
+		return -ENODEV;
+	}
+
+	rmem = of_reserved_mem_lookup(np);
+	if (!rmem) {
+		dev_err(dev, "unable to acquire memory-region\n");
+		return -EINVAL;
+	}
+
+	btmem->phys = rmem->base;
+	btmem->reloc = rmem->base;
+	btmem->size = rmem->size;
+	btmem->virt = devm_ioremap_wc(dev, btmem->phys, btmem->size);
+	if (!btmem->virt) {
+		dev_err(dev, "unable to map memory region: %pa+%pa\n",
+				&rmem->base, &rmem->size);
+		return -EBUSY;
+	}
+
+	dev_err(dev, "%s\n", __func__);
+
+	return 0;
+}
+
+int bt_parse_clks(struct bt_descriptor *btDesc)
+{
+	struct device *dev = &btDesc->pdev->dev;
+
+	btDesc->btss_reset = devm_reset_control_get(dev, "btss_reset");
+	if (IS_ERR_OR_NULL(btDesc->btss_reset)) {
+		dev_err(dev, "unable to acquire btss_reset\n");
+		return PTR_ERR(btDesc->btss_reset);
+	}
+
+	btDesc->lpo_clk = devm_clk_get(dev, "lpo_clk");
+	if (IS_ERR(btDesc->lpo_clk)) {
+		dev_err(dev, "failed to get lpo_clk\n");
+		return PTR_ERR(btDesc->lpo_clk);
+	}
+
+	return 0;
+}
+
+int bt_parse_pinctrl(struct bt_descriptor *btDesc)
+{
+	struct device *dev = &btDesc->pdev->dev;
+
+	btDesc->pinctrl = devm_pinctrl_get(dev);
+	if (IS_ERR_OR_NULL(btDesc->pinctrl)) {
+		dev_err(dev, "unable to get pinctrl\n");
+		return PTR_ERR(btDesc->pinctrl);
+	}
+
+	return 0;
+}
+
+int bt_parse_dt(struct bt_descriptor *btDesc)
+{
+	int ret;
+	struct device *dev = &btDesc->pdev->dev;
+
+	ret = of_property_read_string(dev->of_node, "firmware-name",
+							&btDesc->fw_name);
+	if (ret < 0) {
+		dev_err(dev, "could not find firmware name, ret = %d\n", ret);
+		return ret;
+	}
+
+	ret = bt_parse_ipc(btDesc);
+	if (ret < 0) {
+		dev_err(dev, "could not get IPC info, ret = %d\n", ret);
+		return ret;
+	}
+
+	ret = bt_parse_mem(btDesc);
+	if (ret < 0) {
+		dev_err(dev, "could not get mem info, ret = %d\n", ret);
+		return ret;
+	}
+
+	ret = bt_parse_clks(btDesc);
+	if (ret < 0) {
+		dev_err(dev, "could not get clk info, ret = %d\n", ret);
+		return ret;
+	}
+
+	ret = bt_parse_pinctrl(btDesc);
+	if (ret < 0) {
+		dev_err(dev, "could not get pinctrl info, ret = %d\n", ret);
+		return ret;
+	}
+
+	btDesc->nosecure = of_property_read_bool(dev->of_node, "qcom,nosecure");
+
+	dev_info(dev, "%s operating in %s mode\n", __func__,
+				btDesc->nosecure ? "non secure" : "secure");
+
+	return 0;
+}
+
+#if defined(CONFIG_DEBUG_FS)
+static int bt_dbgfs_open(struct inode *ip, struct file *fp)
+{
+	return 0;
+}
+
+static ssize_t bt_dbgfs_read(struct file *fp, char __user *buf,
+		size_t count, loff_t *pos)
+{
+	return count;
+}
+
+static int bt_dbgfs_release(struct inode *ip, struct file *fp)
+{
+	return 0;
+}
+
+
+static ssize_t bt_dbgfs_write(struct file *fp, const char __user *buf,
+		size_t count, loff_t *pos)
+{
+	return count;
+}
+
+static const struct file_operations bt_dbgfs_ops = {
+	.owner = THIS_MODULE,
+	.open = bt_dbgfs_open,
+	.read = bt_dbgfs_read,
+	.write = bt_dbgfs_write,
+	.release = bt_dbgfs_release,
+};
+
+static int bt_debugfs_init(struct bt_descriptor *btDesc)
+{
+	void *pret;
+	int index;
+	struct device *dev = &btDesc->pdev->dev;
+	static const char * const dirs[] = {"status", "to_console"};
+
+	btDesc->dbgfs = debugfs_create_dir(btDesc->pdev->name, NULL);
+	if (IS_ERR(btDesc->dbgfs)) {
+		dev_err(dev, "debugfs creation failed %s, ret = %ld\n",
+				btDesc->pdev->name, PTR_ERR(btDesc->dbgfs));
+		return PTR_ERR(btDesc->dbgfs);
+	}
+
+	for (index = 0; index < ARRAY_SIZE(dirs); index++) {
+		pret = debugfs_create_file(dirs[index], S_IRUSR | S_IWUSR,
+					btDesc->dbgfs, NULL, &bt_dbgfs_ops);
+		if (IS_ERR(pret)) {
+			dev_err(dev, "debugfs creation failed %s, ret = %ld\n",
+					dirs[index], PTR_ERR(pret));
+			debugfs_remove_recursive(btDesc->dbgfs);
+			return PTR_ERR(pret);
+		}
+	}
+
+	return 0;
+}
+
+static void bt_debugfs_deinit(struct bt_descriptor *btDesc)
+{
+	debugfs_remove_recursive(btDesc->dbgfs);
+}
+#else
+static inline int bt_debugfs_init(struct bt_descriptor *btDesc)
+{
+	return 0;
+}
+
+static inline void bt_debugfs_deinit(struct bt_descriptor *btDesc)
+{
+}
+#endif
+
+static int bt_probe(struct platform_device *pdev)
+{
+	int ret;
+	struct bt_descriptor *btDesc;
+	struct pinctrl_state *pin_state;
+
+	btDesc = devm_kzalloc(&pdev->dev, sizeof(*btDesc), GFP_KERNEL);
+	if (!btDesc)
+		return -ENOMEM;
+
+	btDesc->pdev = pdev;
+
+	ret = bt_parse_dt(btDesc);
+	if (ret < 0) {
+		dev_err(&pdev->dev, "err parsing DT, ret = %d\n", ret);
+		goto err;
+	}
+
+	ret = bt_debugfs_init(btDesc);
+	if (ret < 0)
+		dev_err(&pdev->dev, "err register debugFs, ret = %d\n", ret);
+
+	if (!btss_debug) {
+		ret = bt_tty_init(btDesc);
+		if (ret < 0) {
+			dev_err(&pdev->dev,
+				"err initializing TTY, ret = %d\n", ret);
+			goto err;
+		}
+
+		btDesc->recvmsg_cb = bt_read;
+	} else {
+		btDesc->debug_en = true;
+
+		pin_state = pinctrl_lookup_state(btDesc->pinctrl, "btss_pins");
+		if (IS_ERR(pin_state)) {
+			ret = PTR_ERR(pin_state);
+			dev_err(&pdev->dev,
+				"btss pinctrl state err, ret = %d\n", ret);
+			goto err;
+		}
+		pinctrl_select_state(btDesc->pinctrl, pin_state);
+
+	}
+
+	btDesc->rproc_pdev = platform_device_register_data(&pdev->dev,
+							"bt_rproc_driver",
+							pdev->id, &btDesc,
+							sizeof(*btDesc));
+	if (IS_ERR(btDesc->rproc_pdev)) {
+		ret = PTR_ERR(btDesc->rproc_pdev);
+		dev_err(&pdev->dev, "err registering rproc, ret = %d\n", ret);
+		goto err_deinit_tty;
+	}
+
+
+	init_waitqueue_head(&btDesc->ipc.wait_q);
+
+	ret = bt_ipc_init(btDesc);
+	if (ret) {
+		dev_err(&pdev->dev, "%s err initializing IPC\n", __func__);
+		goto err_deinit_tty;
+	}
+
+	platform_set_drvdata(pdev, btDesc);
+
+	return 0;
+
+err_deinit_tty:
+	bt_tty_deinit(btDesc);
+err:
+	return ret;
+}
+
+static int bt_remove(struct platform_device *pdev)
+{
+	struct bt_descriptor *btDesc = platform_get_drvdata(pdev);
+
+	bt_ipc_deinit(btDesc);
+	bt_tty_deinit(btDesc);
+	bt_debugfs_deinit(btDesc);
+
+	return 0;
+}
+
+static const struct of_device_id bt_of_match[] = {
+	{.compatible    = "qcom,bt"},
+	{}
+};
+MODULE_DEVICE_TABLE(of, bt_of_match);
+
+static struct platform_driver bt_driver = {
+	.probe  = bt_probe,
+	.remove = bt_remove,
+	.driver = {
+		.name   = "bt_driver",
+		.owner  = THIS_MODULE,
+		.of_match_table = bt_of_match,
+	},
+};
+
+static int __init bt_init(void)
+{
+	int ret;
+
+	ret = platform_driver_register(&bt_driver);
+	if (ret)
+		pr_err("%s: plat_driver registeration  failed\n", __func__);
+
+	return ret;
+}
+
+static void __exit bt_exit(void)
+{
+	platform_driver_unregister(&bt_driver);
+}
+
+module_init(bt_init);
+module_exit(bt_exit);
+
+MODULE_DESCRIPTION("QTI Technologies, Inc.");
+MODULE_LICENSE("GPL v2");
--- /dev/null
+++ b/include/linux/bt.h
@@ -0,0 +1,233 @@
+/*
+ * Copyright (c) 2020 The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef _BT_H
+#define _BT_H
+
+#include <linux/tty.h>
+#include <linux/reset.h>
+#include <linux/serial.h>
+#include <linux/kthread.h>
+#include <linux/tty_flip.h>
+#include <linux/remoteproc.h>
+#include <linux/serial_core.h>
+#include <linux/of_reserved_mem.h>
+#include <linux/platform_device.h>
+#include <linux/pinctrl/consumer.h>
+
+#define	PAS_ID	0xC
+#define	CMD_ID	0x14
+#define BT_M0_WARM_RST_ORIDE	0x0
+#define BT_M0_WARM_RST		0x4
+
+#define IOCTL_IPC_BOOT		0xBE
+#define IPC_TX_QSIZE		0x20
+
+#define	TO_APPS_ADDR(a)		(btmem->virt + (int)(uintptr_t)a)
+#define	TO_BT_ADDR(a)		(a - btmem->virt)
+#define IPC_LBUF_SZ(w, x, y, z)	(((TO_BT_ADDR((void *)w) + w->x) - w->y) / w->z)
+
+#define IPC_MSG_HDR_SZ		(4u)
+#define IPC_MSG_PLD_SZ		(40u)
+#define IPC_TOTAL_MSG_SZ	(IPC_MSG_HDR_SZ + IPC_MSG_PLD_SZ)
+
+#define IPC_LMSG_MASK		(0x8000u)
+#define IPC_RACK_MASK		(0x4000u)
+#define IPC_PKT_TYPE_MASK	(0x0300u)
+#define IPC_MSG_ID_MASK		(0x00FFu)
+
+#define IPC_LMSG_TYPE		((uint16_t) IPC_LMSG_MASK)
+#define IPC_SMSG_TYPE		((uint16_t) 0x0000u)
+#define IPC_REQ_ACK		((uint16_t) IPC_RACK_MASK)
+#define IPC_NO_ACK		((uint16_t) 0x0000u)
+#define IPC_PKT_TYPE_CUST	((uint16_t) 0x0000u)
+#define IPC_PKT_TYPE_HCI	((uint16_t) 0x0100u)
+#define IPC_PKT_TYPE_AUDIO	((uint16_t) 0x0200u)
+#define IPC_PKT_TYPE_RFU	(IPC_PKT_TYPE_MASK)
+
+#define IPC_LMSG_SHIFT		(15u)
+#define IPC_RACK_SHIFT		(14u)
+#define IPC_PKT_TYPE_SHIFT	(8u)
+
+#define	GET_NO_OF_BLOCKS(a, b) ((a + b - 1) / b)
+
+#define GET_RX_INDEX_FROM_BUF(x, y)	((x - btmem->rx_ctxt->lring_buf) / y)
+
+#define GET_TX_INDEX_FROM_BUF(x, y)	((x - btmem->tx_ctxt->lring_buf) / y)
+
+#define IS_RX_MEM_NON_CONTIGIOUS(pBuf, len, sz)		\
+	((pBuf + len) >			\
+	(btmem->rx_ctxt->lring_buf +	\
+	(sz * btmem->rx_ctxt->lmsg_buf_cnt)))
+
+/** Message header format.
+ *
+ *         ---------------------------------------------------------------
+ * BitPos |    15    | 14 | 13 | 12 | 11 | 10 |  9  |  8  |    7 - 0     |
+ *         ---------------------------------------------------------------
+ * Field  | Long Msg |rAck|        RFU        |  PktType  |    msgID     |
+ *         ---------------------------------------------------------------
+ *
+ * - Long Msg   :
+ *
+ * - reqAck     : This is interpreted by receiver for sending acknowledegement
+ *                to sender i.e. send a ack IPC interrupt if set.
+ *                Use @ref IS_REQ_ACK or @ref IS_NO_ACK
+ *                to determine ack is requested or not.
+ *
+ * - RFU        : Reserved for future use.
+ *
+ * - pktType    :
+ *
+ * - msgID      : Contains unique message ID within a Category.
+ *                Use @ref IPC_GET_MSG_ID to get message ID.
+ */
+#define IPC_ConstructMsgHeader(msgID, reqAck, pktType, longMsg)	\
+	(((uint8_t) longMsg << IPC_LMSG_SHIFT) |		\
+	((uint8_t) reqAck << IPC_RACK_SHIFT) |			\
+	((uint16_t) pktType << IPC_PKT_TYPE_SHIFT) | msgID)
+
+#define IPC_GET_PKT_TYPE(hdr)	\
+	((enum ipc_pkt_type)((hdr & IPC_PKT_TYPE_MASK) >> IPC_PKT_TYPE_SHIFT))
+
+#define IS_LONG_MSG(hdr)	((hdr & IPC_LMSG_MASK) == IPC_LMSG_TYPE)
+#define IS_SHORT_MSG(hdr)	((hdr & IPC_LMSG_MASK) == IPC_SMSG_TYPE)
+
+#define IS_REQ_ACK(hdr)		((hdr & IPC_RACK_MASK) == IPC_REQ_ACK)
+#define IS_NO_ACK(hdr)		((hdr & IPC_RACK_MASK) == IPC_NO_ACK)
+
+#define IS_HCI_PKT(hdr)		((hdr & IPC_PKT_TYPE_MASK) == IPC_PKT_TYPE_HCI)
+#define IS_CUST_PKT(hdr)	((hdr & IPC_PKT_TYPE_MASK) == IPC_PKT_TYPE_CUST)
+
+#define IPC_GET_MSG_ID(hdr)	((uint8_t)(hdr & IPC_MSG_ID_MASK))
+
+#define IPC_CMD_IPC_STOP	(0x01)
+#define IPC_CMD_SWITCH_TO_UART	(0x02)
+#define IPC_CMD_PREPARE_DUMP	(0x03)
+#define IPC_CMD_COLLECT_DUMP	(0x04)
+#define IPC_CMD_IPC_START	(0x05)
+
+/*-------------------------------------------------------------------------
+ * Type Declarations
+ * ------------------------------------------------------------------------
+ */
+
+enum ipc_pkt_type {
+	IPC_CUST_PKT,
+	IPC_HCI_PKT,
+	IPC_AUDIO_PKT,
+	IPC_PKT_MAX
+};
+
+struct long_msg_info {
+	uint16_t smsg_free_cnt;
+	uint16_t lmsg_free_cnt;
+	uint8_t ridx;
+	uint8_t widx;
+};
+
+struct ipc_aux_ptr {
+	uint32_t len;
+	uint32_t buf;
+};
+
+struct ring_buffer {
+	uint16_t msg_hdr;
+	uint16_t len;
+
+	union {
+		uint8_t  smsg_data[IPC_MSG_PLD_SZ];
+		uint32_t  lmsg_data;
+	} payload;
+};
+
+struct ring_buffer_info {
+	uint32_t rbuf;
+	uint8_t ring_buf_cnt;
+	uint8_t ridx;
+	uint8_t widx;
+	uint8_t tidx;
+	uint32_t next;
+};
+
+struct context_info {
+	uint16_t TotalMemorySize;
+	uint8_t lmsg_buf_cnt;
+	uint8_t smsg_buf_cnt;
+	struct ring_buffer_info sring_buf_info;
+	uint32_t sring_buf;
+	uint32_t lring_buf;
+	uint32_t reserved;
+};
+
+
+struct bt_mem {
+	phys_addr_t phys;
+	phys_addr_t reloc;
+	void __iomem *virt;
+	size_t size;
+	struct context_info *tx_ctxt;
+	struct context_info *rx_ctxt;
+	struct long_msg_info lmsg_ctxt;
+};
+
+struct bt_ipc {
+	struct regmap *regmap;
+	int offset;
+	int bit;
+	int irq;
+	struct list_head tx_q;
+	struct workqueue_struct *wq;
+	struct work_struct work;
+	wait_queue_head_t wait_q;
+	atomic_t tx_q_cnt;
+};
+
+struct bt_descriptor {
+	struct tty_driver *tty_drv;
+	struct tty_port tty_port;
+	struct reserved_mem *rmem;
+	const char *fw_name;
+	struct platform_device *pdev;
+	void __iomem *warm_reset;
+	struct bt_ipc ipc;
+	struct bt_mem btmem;
+	struct reset_control *btss_reset;
+	struct clk *lpo_clk;
+	struct dentry *dbgfs;
+	struct platform_device *rproc_pdev;
+	int (*sendmsg_cb)(struct bt_descriptor *, unsigned char *, int);
+	void (*recvmsg_cb)(struct bt_descriptor *, unsigned char *, int);
+	spinlock_t lock;
+	atomic_t state;
+	struct notifier_block panic_nb;
+	struct pinctrl *pinctrl;
+	bool debug_en;
+	bool nosecure;
+};
+
+struct ipc_intent {
+	uint8_t *buf;
+	uint16_t len;
+	struct list_head list;
+};
+
+extern int bt_ipc_send_msg(struct bt_descriptor *btDesc, uint16_t msg_hdr,
+		const uint8_t *pData, uint16_t len, bool dequeue);
+extern int bt_ipc_avail_size(struct bt_descriptor *btDesc);
+extern void bt_ipc_purge_tx_queue(struct bt_descriptor *btDesc);
+extern int bt_ipc_init(struct bt_descriptor *btDesc);
+extern void bt_ipc_deinit(struct bt_descriptor *btDesc);
+extern u64 rproc_elf_get_boot_addr(struct rproc *rproc,
+					const struct firmware *fw);
+#endif /* _BT_H */
--- a/drivers/soc/qcom/Kconfig
+++ b/drivers/soc/qcom/Kconfig
@@ -16,6 +16,16 @@ config QCOM_AOSS_QMP
 	  subsystems as well as controlling the debug clocks exposed by the Always On
 	  Subsystem (AOSS) using Qualcomm Messaging Protocol (QMP).
 
+config QCOM_BT_IPC
+	tristate
+
+config QCOM_BT_TTY
+	tristate "Qualcomm Bluetooth Interface Driver"
+	select QCOM_BT_IPC
+	help
+	  Qualcomm Bluetooth interface driver to support and control bluetooth
+	  controllers found on SOCs such as IPQ5018
+
 config QCOM_COMMAND_DB
 	tristate "Qualcomm Command DB"
 	depends on ARCH_QCOM || COMPILE_TEST
--- a/drivers/soc/qcom/Makefile
+++ b/drivers/soc/qcom/Makefile
@@ -1,6 +1,8 @@
 # SPDX-License-Identifier: GPL-2.0
 CFLAGS_rpmh-rsc.o := -I$(src)
 obj-$(CONFIG_QCOM_AOSS_QMP) +=	qcom_aoss.o
+obj-$(CONFIG_QCOM_BT_IPC) += bt_ipc.o
+obj-$(CONFIG_QCOM_BT_TTY) += bt_tty.o
 obj-$(CONFIG_QCOM_GENI_SE) +=	qcom-geni-se.o
 obj-$(CONFIG_QCOM_COMMAND_DB) += cmd-db.o
 obj-$(CONFIG_QCOM_CPR)		+= cpr.o
