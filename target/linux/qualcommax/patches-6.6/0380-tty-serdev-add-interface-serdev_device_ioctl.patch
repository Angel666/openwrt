--- a/drivers/tty/serdev/core.c
+++ b/drivers/tty/serdev/core.c
@@ -394,6 +394,17 @@ int serdev_device_get_tiocm(struct serde
 }
 EXPORT_SYMBOL_GPL(serdev_device_get_tiocm);
 
+int serdev_device_ioctl(struct serdev_device *serdev, unsigned int cmd, unsigned long arg)
+{
+	struct serdev_controller * ctrl = serdev->ctrl;
+
+	if (!ctrl || !ctrl->ops->ioctl)
+		return -ENOTTY;
+
+	return ctrl->ops->ioctl(ctrl, cmd, arg);
+}
+EXPORT_SYMBOL_GPL(serdev_device_ioctl);
+
 int serdev_device_set_tiocm(struct serdev_device *serdev, int set, int clear)
 {
 	struct serdev_controller *ctrl = serdev->ctrl;
--- a/drivers/tty/serdev/serdev-ttyport.c
+++ b/drivers/tty/serdev/serdev-ttyport.c
@@ -258,6 +258,17 @@ static int ttyport_break_ctl(struct serd
 	return tty->ops->break_ctl(tty, break_state);
 }
 
+static int ttyport_ioctl(struct serdev_controller *ctrl, unsigned int cmd, unsigned long arg)
+{
+	struct serport *serport = serdev_controller_get_drvdata(ctrl);
+	struct tty_struct *tty = serport->tty;
+
+	if (!tty->ops->ioctl)
+		return -EOPNOTSUPP;
+
+	return tty->ops->ioctl(tty, cmd, arg);
+}
+
 static const struct serdev_controller_ops ctrl_ops = {
 	.write_buf = ttyport_write_buf,
 	.write_flush = ttyport_write_flush,
@@ -271,6 +282,7 @@ static const struct serdev_controller_op
 	.get_tiocm = ttyport_get_tiocm,
 	.set_tiocm = ttyport_set_tiocm,
 	.break_ctl = ttyport_break_ctl,
+	.ioctrl = ttyport_ioctl,
 };
 
 struct device *serdev_tty_port_register(struct tty_port *port,
--- a/include/linux/serdev.h
+++ b/include/linux/serdev.h
@@ -94,6 +94,7 @@ struct serdev_controller_ops {
 	int (*get_tiocm)(struct serdev_controller *);
 	int (*set_tiocm)(struct serdev_controller *, unsigned int, unsigned int);
 	int (*break_ctl)(struct serdev_controller *ctrl, unsigned int break_state);
+	int (*ioctl)(struct serdev_controller *, unsigned int, unsigned long);
 };
 
 /**
@@ -205,6 +206,7 @@ void serdev_device_wait_until_sent(struc
 int serdev_device_get_tiocm(struct serdev_device *);
 int serdev_device_set_tiocm(struct serdev_device *, int, int);
 int serdev_device_break_ctl(struct serdev_device *serdev, int break_state);
+int serdev_device_ioctl(struct serdev_device *, unsigned int, unsigned long);
 void serdev_device_write_wakeup(struct serdev_device *);
 int serdev_device_write(struct serdev_device *, const unsigned char *, size_t, long);
 void serdev_device_write_flush(struct serdev_device *);
@@ -262,6 +264,11 @@ static inline int serdev_device_break_ct
 {
 	return -EOPNOTSUPP;
 }
+static inline int serdev_device_ioctl(struct serdev_device *serdev, unsigned int cmd,
+				      unsigned long arg)
+{
+	return -EOPNOTSUPP;
+}
 static inline int serdev_device_write(struct serdev_device *sdev, const unsigned char *buf,
 				      size_t count, unsigned long timeout)
 {
